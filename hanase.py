#!/usr/bin/env python3
import sys
import re
import argparse
import sqlite3
import requests
import getpass
import logging
from pyfiglet import Figlet

# Me
__author__ = "Emilio / @ekio_jp"
__version__ = "2.0"

# Config
tlpcnt = 0


def connectsql(sqlfile):
    conn = sqlite3.connect(sqlfile)
    c = conn.cursor()
    return conn, c


def closesql(conn):
    conn.close()


def getjvn(options, s, token, url, c, cve):
    global tlpcnt
    templateid = 0
    cveqry = 'SELECT id,title,summary,jvn_link FROM jvns WHERE cve_id=?'
    c.execute(cveqry, [cve])
    jvnresult = c.fetchone()
    if jvnresult:
        cvssqry = 'SELECT base_severity FROM cvss3 WHERE jvn_id=?'
        c.execute(cvssqry, [jvnresult[0]])
        cvssresult = c.fetchone()
        if cvssresult:
            severity = cvssresult[0].lower()
        else:
            cvssqry = 'SELECT severity FROM cvss2 WHERE jvn_id=?'
            c.execute(cvssqry, [jvnresult[0]])
            cvssresult = c.fetchone()
            if cvssresult:
                severity = cvssresult[0].lower()
            else:
                severity = 'unclassified'

        vulname = jvnresult[1] + ' (' + cve + ')'
        vultlp = {
            "cwe" : "",
            "description" : jvnresult[2],
            "desc" : jvnresult[2],
            "exploitation" : severity,
            "name" : vulname,
            "references" : [jvnresult[3]],
            "refs" : [jvnresult[3]],
            "resolution" : "",
            "type" : "vulnerability_template"
            }
        if options.dryrun:
            logger.debug('Adding Vuln Templace: ', vultlp['name'])
            tlpcnt = tlpcnt + 1
            templateid = 1
        else:
            mm = s.post(url + '/_api/v2/vulnerability_template/', headers=token, json=vultlp)
            if mm.status_code == 201:
                templateid = mm.json()['id']
                tlpcnt = tlpcnt + 1
            elif mm.status_code == 409:
                templateid = mm.json()['object']['id']
    return templateid


def getjvndetails(c, cvelist):
    desc = ''
    refs = []
    descqry = 'SELECT summary,jvn_link FROM jvns WHERE cve_id=?'
    for x in range(len(cvelist)):
        c.execute(descqry, [cvelist[x]])
        descresults = c.fetchone()
        if descresults:
            desc = desc + '(' + cvelist[x] + ')\n' + descresults[0] + '\n\n'
            refs.append(descresults[1])
    return desc,refs


def parsingopt():
    f = Figlet(font='standard')
    print(f.renderText('hanase'))
    print('Author: ' + __author__)
    print('Version: ' + __version__ + '\n')
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('-d', dest='dryrun', action='store_true', help='Dry-run TEST')
    parser.add_argument('-w', dest='ws_name', required=True, metavar='<workspace>',
                        default='test', help='Faraday Workspace')
    parser.add_argument('-s', dest='server', required=False, metavar='<server>',
                        default='http://localhost:5985', help='Faraday Server (default: http://localhost:5985)')
    parser.add_argument('-i', dest='jvndb', required=True, metavar='<input JVN>',
                        help='JVN DB generated by https://github.com/kotakanbe/go-cve-dictionary (SQLite3)')
    parser.add_argument('-o', dest='outrule', required=True, metavar='<rules.py>',
                        default='rule.py', help='Generate rules.py for faraday/scripts/searcher.py')
    parser.add_argument('-u', dest='username', required=False, metavar='<username>',
                        default='faraday', help='Faraday Username (default: faraday)')
    parser.add_argument('-p', dest='password', required=False, metavar='<password>',
                        help='Faraday Password (default: prompt)')
    if len(sys.argv) > 1:
        try:
            return parser.parse_args()
        except IOError as msg:
            parser.error(str(msg))
    else:
        parser.print_help()
        sys.exit(1)


# Main Function
def main():

    # Get options
    options = parsingopt()
    ws_name = options.ws_name
    server_address = options.server
    outfile = options.outrule
    fdjvnsql = options.jvndb
    username = options.username
    if options.password:
        password = options.password
    else:
        password = getpass.getpass()

    # Create logger
    logger = logging.getLogger()
    ch_handler = logging.StreamHandler()
    ch_format = logging.Formatter('%(asctime)s - %(levelname)s: %(message)s',
                                  datefmt='%d-%b-%y %H:%M:%S')

    if options.dryrun:
        ch_handler.setLevel(logging.DEBUG)
        logger.setLevel(logging.DEBUG)
    else:
        ch_handler.setLevel(logging.INFO)
        logger.setLevel(logging.INFO)
    ch_handler.setFormatter(ch_format)
    logger.addHandler(ch_handler)

    # API Login
    session = requests.Session()
    ap = session.post(server_address + '/_api/login', json={'email': username, 'password': password})
    if ap.status_code != 200:
        logger.error('Invalid Faraday API Credentials')
        sys.exit(1)
    tk = session.get(server_address + '/_api/v2/token/')
    if tk.status_code == 200:
        token = {'Authorization': 'Token ' + tk.text[1:-1]}
    else:
        logger.error('Can\'t get Authorization Token')
        sys.exit(1)

    # Grab all Vuls from Workspace
    resp = session.get(server_address + '/_api/v2/ws/' + ws_name + '/vulns/', headers=token)
    data = resp.json()

    # Connect to SQLite
    try:
        jvnconn, csqljvn = connectsql(fdjvnsql)
    except Exception as msg:
        logger.error('Can\'t connect to JVN SQLite file: ', fdjvnsql)
        logger.error(msg)

    # Write headers for rules.py file (used by searcher.py)
    fdout = open(outfile, 'w')
    fdout.write('[')

    # Search for CVE's on each Vul Refs and generate rules.py
    ruleadded = []
    allcve = []
    descupdated = 0
    notfound = set()
    for x in range(len(data['vulnerabilities'])):
        cveset = set()
        for z in range(len(data['vulnerabilities'][x]['value']['refs'])):
            cveref = re.findall('CVE\-\d+\-\d+', data['vulnerabilities'][x]['value']['refs'][z])
            if cveref:
                for m in range(len(cveref)):
                    cveset.add(cveref[m])
        uniqcve = list(cveset)

        if len(uniqcve) == 1:
            if uniqcve[0] not in allcve:
                allcve.append(uniqcve[0])
            templateid = getjvn(options, session, token, server_address, csqljvn, uniqcve[0])
            vulname = data['vulnerabilities'][x]['value']['name']
            if templateid:
                if vulname not in ruleadded:
                    ruleadded.append(vulname)
                    rule = {
                        "id" : uniqcve[0] + '_' + str(data['vulnerabilities'][x]['key']),
                        "model" : "Vulnerability",
                        "object": "name=" + vulname.replace(' ', '%'),
                        "actions" : ["--UPDATE:template=" + str(templateid)]
                        }
                    fdout.write(json.dumps(rule, indent=4) + ',\n')
            else:
                notfound.add(uniqcve[0])

        elif len(uniqcve) > 1:
            for c in range(len(uniqcve)):
                if uniqcve[c] not in allcve:
                    allcve.append(uniqcve[c])
                    templateid = getjvn(options, session, token, server_address, csqljvn, uniqcve[c])
                    if not templateid:
                        notfound.add(uniqcve[c])

            chgdesc, refs = getjvndetails(csqljvn, uniqcve)
            if chgdesc and refs:
                vu = data['vulnerabilities'][x]['value']
                vu['desc'] = chgdesc
                vu['description'] = chgdesc
                for l in range(len(refs)):
                    vu['refs'].append(refs[l])
                if not options.dryrun:
                    mm =  session.put(server_address
                                      + '/_api/v2/ws/'
                                      + ws_name
                                      + '/vulns/'
                                      + str(data['vulnerabilities'][x]['key'])
                                      + '/',
                                      header=token, json=vu)
                    if mm.status_code != 200:
                        logger.error('Updating Vuls name: ', data['vulnerabilities'][x]['value']['name'])
                        logger.error(mm.text)
                else:
                    logger.debug('Updating Description for Vul: ', data['vulnerabilities'][x]['value']['name'])
                descupdated = descupdated + 1

    fdout.write(']')
    fdout.close()
    closesql(jvnconn)

    logger.info('Amount of Vulnerabilities in Workspace: ' + str(len(data['vulnerabilities'])))
    if options.dryrun:
        logger.debug('Amount of Templates Added into Faraday: ' + str(len(allcve) - len(notfound)))
    else:
        logger.info('Amount of Templates Added into Faraday: ' + tlpcnt)
    logger.info('Amount of Rules Generated for searcher.py (Vuls with 1 CVE only): ' + str(len(ruleadded)))
    logger.info('Vulnerabilities Description Updated (multiple CVE\'s): ' + str(descupdated))
    logger.info('Amount of CVE\'s Found in JVN DB: ' + str(len(allcve)))
    logger.info('Amount of CVE\'s Not Found in JVN DB: ' + str(len(notfound)))
    logger.info('\n'.join(notfound))


# Call main
if __name__ == '__main__':
    main()
